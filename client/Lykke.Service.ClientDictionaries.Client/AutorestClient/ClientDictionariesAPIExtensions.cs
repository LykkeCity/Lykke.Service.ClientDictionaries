// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.ClientDictionaries.AutorestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ClientDictionariesAPI.
    /// </summary>
    public static partial class ClientDictionariesAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='key'>
            /// </param>
            public static ResponseModel ApiDictionaryByClientIdByKeyGet(this IClientDictionariesAPI operations, string clientId, string key)
            {
                return operations.ApiDictionaryByClientIdByKeyGetAsync(clientId, key).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResponseModel> ApiDictionaryByClientIdByKeyGetAsync(this IClientDictionariesAPI operations, string clientId, string key, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiDictionaryByClientIdByKeyGetWithHttpMessagesAsync(clientId, key, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ResponseModel ApiDictionaryByClientIdByKeyPost(this IClientDictionariesAPI operations, string clientId, string key, SetRequestModel model = default(SetRequestModel))
            {
                return operations.ApiDictionaryByClientIdByKeyPostAsync(clientId, key, model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResponseModel> ApiDictionaryByClientIdByKeyPostAsync(this IClientDictionariesAPI operations, string clientId, string key, SetRequestModel model = default(SetRequestModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiDictionaryByClientIdByKeyPostWithHttpMessagesAsync(clientId, key, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='key'>
            /// </param>
            public static ResponseModel ApiDictionaryByClientIdByKeyDelete(this IClientDictionariesAPI operations, string clientId, string key)
            {
                return operations.ApiDictionaryByClientIdByKeyDeleteAsync(clientId, key).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResponseModel> ApiDictionaryByClientIdByKeyDeleteAsync(this IClientDictionariesAPI operations, string clientId, string key, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiDictionaryByClientIdByKeyDeleteWithHttpMessagesAsync(clientId, key, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IClientDictionariesAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IClientDictionariesAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
